/*
** Copyright (c) 2013, Cthulhu / Cthulhu@GBITnet.com.br
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**
** 1. Redistributions of source code must retain the above copyright notice, this
**    list of conditions and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright notice,
**    this list of conditions and the following disclaimer in the documentation
**    and/or other materials provided with the distribution.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
** ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
** ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
** ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

`define GAME (WorldInfo.Game)

enum ETKInfo
{

    TKINFO_Values,
    TKINFO_Players

};

protected reliable client function ClientDisplayTKInfo(string TKInfoString, optional bool CopyToClipboard = false)
{

    /* Display TK related info on the client's console.
       Also copy to the clipboard if asked to. */

    local LocalPlayer ClientLocalPlayer;

    ClientLocalPlayer = LocalPlayer(Player);

    if (ClientLocalPlayer == none)
        return;

    ClientLocalPlayer.ViewportClient.ViewportConsole.OutputText(TKInfoString);

    if (CopyToClipboard)
        ClientLocalPlayer.Actor.CopyToClipboard(TKInfoString);

}

/* Admin commands. */

exec function SaveTKValues()
{

    S_SaveTKValues();

}

exec function SetTKPointsPerDamage(int NewValue)
{

    S_SetTKValue(TKVAR_PointsPerDamage, NewValue);

}

exec function SetTKPointsPerPunish(int NewValue)
{

    S_SetTKValue(TKVAR_PointsPerPunish, NewValue);

}

exec function SetTKPointsPerAutoPunish(int NewValue)
{

    S_SetTKValue(TKVAR_PointsPerAutoPunish, NewValue);

}

exec function SetTKPointsRemoveInterval(float NewValue)
{

    S_SetTKValue(TKVAR_PointsRemoveInterval,,NewValue);

}

exec function SetTKPointsRemovedPerInterval(int NewValue)
{

    S_SetTKValue(TKVAR_PointsRemovedPerInterval, NewValue);

}

exec function SetTKPointsMax(int NewValue)
{

    S_SetTKValue(TKVAR_PointsMax, NewValue);

}

exec function SetTKBanDuration(float NewValue)
{

    S_SetTKValue(TKVAR_BanDuration,,NewValue);

}

`if(`isdefined(TKPMod_TO))

    // Only available for Team Objective mode.

    exec function SetTKIgnoreKing(bool NewValue)
    {

        S_SetTKValue(TKVAR_IgnoreKing,,,NewValue);

    }

`endif

exec function GetTKValues(optional bool CopyToClipboard)
{

    S_GetTKInfo(TKINFO_Values, CopyToClipboard);

}

exec function GetTKPlayerInfo(optional bool CopyToClipboard)
{

    S_GetTKInfo(TKINFO_Players, CopyToClipboard);

}

protected reliable server function S_SaveTKValues()
{

    `{GAMEMODE}`{GAME}.SaveTKValues(self);

}

protected reliable server function S_SetTKValue(ETKVariable opcode, optional int NewValueInt, optional float NewValueFloat, optional bool NewValueBool)
{

    `{GAMEMODE}`{GAME}.SetTKValue(self, opcode, NewValueInt, NewValueFloat, NewValueBool);

}

protected reliable server function S_GetTKInfo(ETKInfo opcode, optional bool CopyToClipboard = false)
{

    local bool Retrieved;
    local string TKInfoString;

    switch (opcode)
    {

        case TKINFO_Values:

            Retrieved = `{GAMEMODE}`{GAME}.GetTKValues(self, TKInfoString);
            break;

        case TKINFO_Players:

            Retrieved = `{GAMEMODE}`{GAME}.GetTKPlayerInfo(self, TKInfoString);
            break;

        default:

            return;
            break;

    }

    if (Retrieved)
        ClientDisplayTKInfo(TKInfoString, CopyToClipboard);

}